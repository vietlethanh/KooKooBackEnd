<?php
/*
 * This file was automatically generated By Code Smith 
 * Modifications will be overwritten when code smith is run
 *
 * PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
 * Date Created 5/6/2012
 *
 */

/* <summary>
 * Implementations of slstores represent a Store
 * </summary>
 */
class Model_Store
{		   
	#region PRESERVE ExtraMethods For Store
	#endregion
    #region Contants	
    const ACT_ADD							= 10;
    const ACT_UPDATE						= 11;
    const ACT_DELETE						= 12;
    const ACT_CHANGE_PAGE					= 13;
    const ACT_SHOW_EDIT                     = 14;
    const ACT_GET                           = 15;
    const NUM_PER_PAGE                      = 15;
    
    const TBL_SL_STORE			            = 'sl_store';
    const TBL_SL_CHECKIN     = 'sl_checkin';
	const SQL_INSERT_SL_STORE		= 'INSERT INTO `{0}`
		(
			StoreID,
			Name,
			Address,
			DistrictID,
			CityID,
			Phone,
			SpecialDesc,
			Latitude,
			Longitude,
			WorkingDay,
			MainCategoryId,
			StoreIcon,
			StoreImage,
			Status,
			CreatedBy,
			CreateDate,
			UpdatedBy,
			UpdatedDate,
			DeletedBy,
			DeletedDate,
            RefID
        )
        VALUES (
			\'{1}\', \'{2}\', \'{3}\', \'{4}\', \'{5}\', \'{6}\', \'{7}\', \'{8}\', \'{9}\', \'{10}\', \'{11}\', \'{12}\', \'{13}\', \'{14}\', \'{15}\', \'{16}\', \'{17}\', \'{18}\', \'{19}\', \'{20}\', \'{21}\'
        );';
    
    const SQL_INSERT_SL_CHECKIN		= 'INSERT INTO `{0}`
		(
			StoreID,
			UserID,
			Message,
			Rate,
			CreatedDate		
        )
        VALUES (
			\'{1}\', \'{2}\', \'{3}\', \'{4}\', \'{5}\'
        );';
    
    const SQL_UPDATE_SL_CHECKIN		= 'UPDATE `{0}`
		SET  
			`StoreID` = \'{1}\',
			`UserID` = \'{2}\',
			`Message` = \'{3}\',
			`Rate` = \'{4}\',
			`CreatedDate` = \'{5}\'
    	WHERE `StoreID` = \'{1}\' and `UserID` =  \'{2}\' ';
   
	const SQL_UPDATE_SL_STORE		= 'UPDATE `{0}`
		SET  
			`StoreID` = \'{1}\',
			`Name` = \'{2}\',
			`Address` = \'{3}\',
			`DistrictID` = \'{4}\',
			`CityID` = \'{5}\',
			`Phone` = \'{6}\',
			`SpecialDesc` = \'{7}\',
			`Latitude` = \'{8}\',
			`Longitude` = \'{9}\',
			`WorkingDay` = \'{10}\',
			`MainCategoryId` = \'{11}\',
			`StoreIcon` = \'{12}\',
			`StoreImage` = \'{13}\',
			`Status` = \'{14}\',
			`CreatedBy` = \'{15}\',
			`CreateDate` = \'{16}\',
			`UpdatedBy` = \'{17}\',
			`UpdatedDate` = \'{18}\',
			`DeletedBy` = \'{19}\',
			`DeletedDate` = \'{20}\'
		WHERE `StoreID` = \'{1}\'  ';
		   

    const SQL_CREATE_TABLE_SL_STORE		= 'CREATE TABLE `{0}` (

			`StoreID` ,
			`Name` varchar(250),
			`Address` varchar(250),
			`DistrictID` ,
			`CityID` ,
			`Phone` varchar(250),
			`SpecialDesc` ,
			`Latitude` ,
			`Longitude` ,
			`WorkingDay` ,
			`MainCategoryId` ,
			`StoreIcon` ,
			`StoreImage` ,
			`Status` ,
			`CreatedBy` ,
			`CreateDate` ,
			`UpdatedBy` ,
			`UpdatedDate` ,
			`DeletedBy` ,
			`DeletedDate` ,
			PRIMARY KEY(StoreID)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;';
	
    const SQL_CREATE_TABLE_SL_CHECKIN		= 'CREATE TABLE `{0}` (
              `StoreID` int(11) DEFAULT NULL,
              `UserID` int(11) DEFAULT NULL,
              `Message` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
              `Rate` int(11) DEFAULT NULL,
              `CreatedDate` datetime DEFAULT NULL
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;';
	
    #endregion   
    
    #region Variables
	var $_objConnection;
	#end region
	
	#region Contructors
	/**
	*  Phuong th?c kh?i t?o d?i tu?ng faq d?ng th?i t?o connection d?n db
	*
	* @param object $objConnection ??i tu?ng k?t n?i d?n db
			
	* @return void 
	*
	*/
	public function  Model_Store($objConnection)
	{
		$this->_objConnection = $objConnection;
		
	}
    #region
    
    #region Public Functions
    
    public function insert( $name,$address,$distictid,$cityid,$phone,$specialdesc,$latitude,$longitude,$workingday,$maincategoryid,$storeicon,$storeimage,$status,$createdby,$createdate,$updatedby,$updateddate,$deletedby,$deleteddate,$refId)
	{
		$strTableName = self::TBL_SL_STORE;
        	
		$intID = global_common::getMaxValueofField($this->_objConnection,global_mapping::StoreID, $strTableName) + 1;
	
		$strSQL = global_common::prepareQuery(self::SQL_INSERT_SL_STORE,
				array(self::TBL_SL_STORE,$intID,
                global_common::escape_mysql_string($name),
                global_common::escape_mysql_string($address),
                global_common::escape_mysql_string($distictid),
                global_common::escape_mysql_string($cityid),
                global_common::escape_mysql_string($phone),
                global_common::escape_mysql_string($specialdesc),
                global_common::escape_mysql_string($latitude),
                global_common::escape_mysql_string($longitude),
                global_common::escape_mysql_string($workingday),
                global_common::escape_mysql_string($maincategoryid),
                global_common::escape_mysql_string($storeicon),
                global_common::escape_mysql_string($storeimage),
                global_common::escape_mysql_string($status),
                global_common::escape_mysql_string($createdby),
                global_common::escape_mysql_string($createdate),
                global_common::escape_mysql_string($updatedby),
                global_common::escape_mysql_string($updateddate),
                global_common::escape_mysql_string($deletedby),
                global_common::escape_mysql_string($deleteddate),
                $refId));
		//echo $strSQL;
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_SL_STORE,$this->_objConnection,$strTableName))
		{
			//echo $strSQL;
			global_common::writeLog('Error add sl_store:'.$strSQL,1);
			return false;
		}	
		return $intID;
		
	}
    
    public function addCheckIn( $storeID,$userID,$message,$rate)
	{
		$strTableName = self::TBL_SL_CHECKIN;
        
		$strSQL = global_common::prepareQuery(self::SQL_INSERT_SL_CHECKIN,
				array(self::TBL_SL_CHECKIN,$storeID,
                global_common::escape_mysql_string($userID),
                global_common::escape_mysql_string($message),
                global_common::escape_mysql_string($rate),              
                global_common::nowSQL()
               ));
		//echo $strSQL;
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_SL_CHECKIN,$this->_objConnection,$strTableName))
		{
			//echo $strSQL;
			global_common::writeLog('Error add addCheckIn:'.$strSQL,1);
			return false;
		}	
		return $intID;
		
	}
    
    public function getCheckInByStore( $storeID)
	{
		$strTableName = self::TBL_SL_CHECKIN;
        $strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, self::TBL_SL_STORE ,							
					'WHERE  StoreID = \''.$objID.'\' '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get sl_store ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}      
		//print_r($arrResult);
		return $arrResult[0];
		
	}
    
    public function update($storeid,$name,$address,$distictid,$cityid,$phone,$specialdesc,$latitude,$longitude,$workingday,
                $maincategoryid,$storeicon,$storeimage,$status,$createdby,$createdate,$updatedby,$updateddate,$deletedby,$deleteddate)
	{
		$strTableName = self::TBL_SL_STORE;
		$strSQL = global_common::prepareQuery(self::SQL_UPDATE_SL_STORE,
				array($strTableName,global_common::escape_mysql_string($storeid),
                global_common::escape_mysql_string($name),global_common::escape_mysql_string($address),
                global_common::escape_mysql_string($distictid),global_common::escape_mysql_string($cityid),
                global_common::escape_mysql_string($phone),global_common::escape_mysql_string($specialdesc),
                global_common::escape_mysql_string($latitude),global_common::escape_mysql_string($longitude),
                global_common::escape_mysql_string($workingday),global_common::escape_mysql_string($maincategoryid),
                global_common::escape_mysql_string($storeicon),global_common::escape_mysql_string($storeimage),
                global_common::escape_mysql_string($status),global_common::escape_mysql_string($createdby),
                global_common::escape_mysql_string($createdate),global_common::escape_mysql_string($updatedby),
                global_common::escape_mysql_string($updateddate),global_common::escape_mysql_string($deletedby),
                global_common::escape_mysql_string($deleteddate) ));
		
        
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_SL_STORE,$this->_objConnection,$strTableName))
		{
			echo $strSQL;
			global_common::writeLog('Error add sl_store:'.$strSQL,1);
			return false;
		}	
		return $storeid;		
	}
    
    public function getStoreByID($objID,$selectField='*') 
	{		
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, self::TBL_SL_STORE ,							
					'WHERE  StoreID = \''.$objID.'\' '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get sl_store ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
        $objArticle = new Model_Article($this->_objConnection);
        $arrArticle = $objArticle->getArticleByStoreID($objID);
        $arrResult[0]["Articles"] = $arrArticle;
        $arrResult[0][global_mapping::CheckIn] = global_common::getTotalRecord(self::TBL_SL_CHECKIN,$this->_objConnection,'where StoreID = \''.$objID.'\'');
		//print_r($arrResult);
		return $arrResult[0];
	}
    
     public function getStoreByRefID($objID,$selectField='*') 
	{		
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, self::TBL_SL_STORE ,							
					'WHERE  RefID = \''.$objID.'\' '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get sl_store ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		//print_r($arrResult);
		return $arrResult[0];
	}
    
    
    public function getAllStore($intPage = 0,$selectField='*',$whereClause='',$orderBy='') 
	{		
        if($whereClause)
		{
			$whereClause = ' WHERE '.$whereClause .' and('.global_mapping::IsDeleted.' IS NULL or '.global_mapping::IsDeleted.' = \'0\')';
		}
        else
        {
            $whereClause = ' WHERE ('.global_mapping::IsDeleted.' IS NULL or '.global_mapping::IsDeleted.' = \'0\')';
        }
		
		if($orderBy)
		{
			$orderBy = ' ORDER BY '.$orderBy;
		}
        if($intPage>0)
        {
		    $strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, Model_Store::TBL_SL_STORE ,							
					$whereClause.$orderBy .' limit '.(($intPage-1)* self::NUM_PER_PAGE).','.self::NUM_PER_PAGE));
        }
        else
        {
            $strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, Model_Store::TBL_SL_STORE ,							
					$whereClause.$orderBy ));
        }
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get All sl_store:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
        if($intPage>0)
        {
            $objCity = new Model_City($this->_objConnection);
            $objDistrict = new Model_District($this->_objConnection);
            
            $tempVarCities = $objCity->getAllCity();
            $allCities = null;
          	foreach($tempVarCities as $key => $info)
    		{
    			$allCities[$info[global_mapping::CityID]]=$info;
    			unset($tempVarCities[$key]);
    		}	
            $tempDistricts = $objDistrict->getAllDistrict();
            $allDistricts = null;
          	foreach($tempDistricts as $key => $info)
    		{
    			$allDistricts[$info[global_mapping::DistrictID]]=$info;
    			unset($tempDistricts[$key]);
    		}	
           // print_r($allDistricts);
           // return;
            $count = count($arrResult);
            for($i=0; $i < $count; $i++)
    		{		
    		  //echo $arrResult;
    		  //print_r( $allCities);
                //$arrResult[$i][global_mapping::CityID] = $allCities[$arrResult[$i][global_mapping::CityID]];
                $arrResult[$i][global_mapping::CityName] = $allCities[$arrResult[$i][global_mapping::CityID]][global_mapping::CityName];	
               // print_r($arrResult[$i]);
                //return;
               // print_r($allCities[$arrResult[$i][global_mapping::CityID]]);
                //break;
                
                $arrResult[$i][global_mapping::DistrictName] = $allDistricts[$arrResult[$i][global_mapping::DistrictID]][global_mapping::DistrictName];
                
                $arrResult[$i][global_mapping::Latitude] = global_common::convertToDecimal($arrResult[$i][global_mapping::Latitude])	;
                $arrResult[$i][global_mapping::Longitude] = global_common::convertToDecimal($arrResult[$i][global_mapping::Longitude])	;
              // print_r($arrResult[$i]);
                //echo $arrResult[$i][global_mapping::DistrictID];
                //echo $allDistricts[$arrResult[$i][global_mapping::DistrictID]][global_mapping::DistrictName];
                //print_r($allDistricts);
                //return ;		
    		}
       }
		//print_r($arrResult);
		return $arrResult;
	}
    
    public function getStoreByIDs($arrIDs) 
	{		
		$arrIDs = global_common::splitString($arrIDs);
		$strQueryIN = global_common::convertToQueryIN($arrIDs);
		if($strQueryIN)
		{
			$strQueryIN= global_mapping::StoreID.' IN ('.$strQueryIN.')';
		}
		else
		{
			$strQueryIN = '1=1';
		}
		$whereClause = 'WHERE '.$strQueryIN;
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE,array('*',
					self::TBL_SL_STORE,$whereClause.' '));
		//echo $strSQL;
		$arrResult =  $this->_objConnection->selectCommand($strSQL);	
		
		if(!$arrResult)
		{
			global_common::writeLog('get getProductByIDs:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		$objCity = new Model_City($this->_objConnection);
        $objDistrict = new Model_District($this->_objConnection);
        
        $tempVarCities = $objCity->getAllCity();
        $allCities = null;
      	foreach($tempVarCities as $key => $info)
		{
			$allCities[$info[global_mapping::CityID]]=$info;
			unset($tempVarCities[$key]);
		}	
        $tempDistricts = $objDistrict->getAllDistrict();
        $allDistricts = null;
      	foreach($tempDistricts as $key => $info)
		{
			$allDistricts[$info[global_mapping::DistrictID]]=$info;
			unset($tempDistricts[$key]);
		}	
       // print_r($allDistricts);
       // return;
        $count = count($arrResult);
        for($i=0; $i < $count; $i++)
		{		
		  //echo $arrResult;
		  //print_r( $allCities);
            //$arrResult[$i][global_mapping::CityID] = $allCities[$arrResult[$i][global_mapping::CityID]];
            $arrResult[$i][global_mapping::CityName] = $allCities[$arrResult[$i][global_mapping::CityID]][global_mapping::CityName];	
           // print_r($arrResult[$i]);
            //return;
           // print_r($allCities[$arrResult[$i][global_mapping::CityID]]);
            //break;
            
            $arrResult[$i][global_mapping::DistrictName] = $allDistricts[$arrResult[$i][global_mapping::DistrictID]][global_mapping::DistrictName];
            
            $arrResult[$i][global_mapping::Latitude] = global_common::convertToDecimal($arrResult[$i][global_mapping::Latitude])	;
            $arrResult[$i][global_mapping::Longitude] = global_common::convertToDecimal($arrResult[$i][global_mapping::Longitude])	;
          // print_r($arrResult[$i]);
            //echo $arrResult[$i][global_mapping::DistrictID];
            //echo $allDistricts[$arrResult[$i][global_mapping::DistrictID]][global_mapping::DistrictName];
            //print_r($allDistricts);
            //return ;		
		}
		//print_r($stores);
		return $arrResult;
	}
    
    public function getListStore($intPage,$orderBy='', $whereClause)
	{		
        if($whereClause)
        {
            $whereClause='WHERE'+ $whereClause;						
        }
        if($orderBy)
        {
            $orderBy='ORDER BY'+ $orderBy;						
        }
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE,array('*',
					self::TBL_SL_STORE,$orderBy.' '.$whereClause.' limit '.(($intPage-1)* self::NUM_PER_PAGE).','.self::NUM_PER_PAGE));
		//echo 'sql:'.$strSQL;	
		$arrResult = $this->_objConnection->selectCommand($strSQL);
		//print_r($arrResult);
		$strHTML = '<table class="tbl-list">
                    <thead>
						<td>StoreID</td>
						<td>Name</td>
						<td>Address</td>
						<td>DistictID</td>
						<td>CityID</td>
						<td>Phone</td>
						<td>SpecialDesc</td>
						<td>Latitude</td>
						<td>Longitude</td>
						<td>WorkingDay</td>
						<td>MainCategoryId</td>
						<td>StoreIcon</td>
						<td>StoreImage</td>
						<td>Status</td>
						<td>CreatedBy</td>
						<td>CreateDate</td>
						<td>UpdatedBy</td>
						<td>UpdatedDate</td>
						<td>DeletedBy</td>
						<td>DeletedDate</td>
                    </thead>
                    <tbody>';
		$icount = count($arrmenu);
		for($i=0;$i<$icount;$i++)
		{
			$strHTML.='<tr class="'.($i%2==0?'even':'odd').'">
						<td>'.$arrResult[$i]['StoreID'].'</td>
						<td>'.$arrResult[$i]['Name'].'</td>
						<td>'.$arrResult[$i]['Address'].'</td>
						<td>'.$arrResult[$i]['DistictID'].'</td>
						<td>'.$arrResult[$i]['CityID'].'</td>
						<td>'.$arrResult[$i]['Phone'].'</td>
						<td>'.$arrResult[$i]['SpecialDesc'].'</td>
						<td>'.$arrResult[$i]['Latitude'].'</td>
						<td>'.$arrResult[$i]['Longitude'].'</td>
						<td>'.$arrResult[$i]['WorkingDay'].'</td>
						<td>'.$arrResult[$i]['MainCategoryId'].'</td>
						<td>'.$arrResult[$i]['StoreIcon'].'</td>
						<td>'.$arrResult[$i]['StoreImage'].'</td>
						<td>'.$arrResult[$i]['Status'].'</td>
						<td>'.$arrResult[$i]['CreatedBy'].'</td>
						<td>'.$arrResult[$i]['CreateDate'].'</td>
						<td>'.$arrResult[$i]['UpdatedBy'].'</td>
						<td>'.$arrResult[$i]['UpdatedDate'].'</td>
						<td>'.$arrResult[$i]['DeletedBy'].'</td>
						<td class="lastCell">'.$arrResult[$i]['DeletedDate'].'</td>
					  </tr>';
		}
		$strHTML.='</tbody></table>';
		
		$strHTML .= "<div>".global_common::getPagingHTMLByNum($intPage,self::NUM_PER_PAGE,global_common::getTotalRecord(self::TBL_SL_STORE,$this->_objConnection),
				"_objMenu.changePage")."</div>";
		return $strHTML;
	}
    
    #endregion   
}
?>